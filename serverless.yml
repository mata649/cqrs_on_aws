
service: todo

frameworkVersion: "3"

provider:
  name: aws
  runtime: go1.x


package:
  patterns:
    - "!./**"
    - ./bin/**

functions:
  user_service:
    handler: ./bin/user_service
    events:
      - httpApi:
          path: /auth
          method: post
      - httpApi:
          path: /users
          method: post
      - httpApi:
          path: /users/{userID}
          method: delete
      - httpApi:
          path: /users
          method: get
    environment:
      USER_TABLE: ${ssm:/users_tb_name}
  task_service:
    handler: ./bin/task_service
    events:
      - httpApi:
          path: /tasks
          method: post
    environment:     
      TASK_TABLE: ${ssm:/tasks_tb_name}
      EXCHANGE: ${ssm:/exchange}
  on_task_created:
    handler: ./bin/on_task_created
    events:
      - sqs: 
          arn: ${ssm:/task_created_queue}

    environment:
      USER_TABLE: ${ssm:/users_tb_name}
    

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     usersTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${ssm:/users_tb_name}
#         AttributeDefinitions:
#           - AttributeName: id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: id
#             KeyType: S
#         ProvisionedThroughput:
#           ReadCapacityUnits: 10
#           WriteCapacityUnits: 10
    
  # Outputs:
  #    NewOutput:
  #      Description: "Description for the output"
  #      Value: "Some output value"
